'use client';

import { useState, useEffect } from 'react';
import { Exploit } from '@/lib/types';

interface UseExploitResult {
  exploit: Exploit | null;
  loading: boolean;
  error: string | null;
  refetch: () => void;
}

export function useExploit(id: number): UseExploitResult {
  const [exploit, setExploit] = useState<Exploit | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchExploit = async () => {
    setLoading(true);
    setError(null);

    try {
      const response = await fetch(`/api/exploits/${id}`);
      
      if (!response.ok) {
        if (response.status === 404) {
          throw new Error('Exploit not found');
        }
        throw new Error('Failed to fetch exploit');
      }

      const data = await response.json();
      setExploit(data.data);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    if (id) {
      fetchExploit();
    }
  }, [id]);

  const refetch = () => {
    fetchExploit();
  };

  return {
    exploit,
    loading,
    error,
    refetch
  };
}
