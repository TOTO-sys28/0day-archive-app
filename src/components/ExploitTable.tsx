'use client';

import { useState } from 'react';
import Link from 'next/link';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Exploit, TableColumn } from '@/lib/types';
import { downloadExploit } from '@/lib/download';
import { ArrowUpDown, ExternalLink, Download } from 'lucide-react';

interface ExploitTableProps {
  exploits: Exploit[];
  onSort: (column: keyof Exploit, order: 'asc' | 'desc') => void;
  sortBy?: keyof Exploit;
  sortOrder?: 'asc' | 'desc';
  className?: string;
}

const columns: TableColumn[] = [
  { key: 'id', label: 'ID', sortable: true },
  { key: 'date', label: 'Date', sortable: true },
  { key: 'title', label: 'Title', sortable: true },
  { key: 'author', label: 'Author', sortable: true, hidden: true },
  { key: 'cve_id', label: 'CVE', sortable: true, hidden: true },
  { key: 'category', label: 'Category', sortable: true },
];

export function ExploitTable({ exploits, onSort, sortBy, sortOrder, className }: ExploitTableProps) {
  const [hoveredRow, setHoveredRow] = useState<number | null>(null);

  const handleSort = (column: keyof Exploit) => {
    const newOrder = sortBy === column && sortOrder === 'asc' ? 'desc' : 'asc';
    onSort(column, newOrder);
  };

  const getCveDisplay = (exploit: Exploit) => {
    if (exploit.cve_id) return exploit.cve_id;
    if (exploit.cves && exploit.cves.length > 0) {
      return exploit.cves[0] + (exploit.cves.length > 1 ? ` +${exploit.cves.length - 1}` : '');
    }
    return null;
  };

  const formatDate = (date: string) => {
    if (!date || date === 'Unknown') return 'Unknown';
    try {
      const [month, day, year] = date.split('/');
      return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
    } catch {
      return date;
    }
  };

  return (
    <Card className={`w-full ${className || ''}`}>
      <CardContent className="p-0">
        <div className="w-full">
          <table className="w-full table-fixed">
            <thead className="border-b bg-muted/30">
              <tr className="text-left">
                <th className="w-16 px-3 py-4 text-sm font-medium text-muted-foreground">
                  {columns[0].sortable ? (
                    <Button
                      variant="ghost"
                      size="sm"
                      className="h-auto p-0 font-medium hover:bg-transparent"
                      onClick={() => handleSort(columns[0].key)}
                    >
                      {columns[0].label}
                      <ArrowUpDown className="ml-2 h-3 w-3" />
                    </Button>
                  ) : (
                    columns[0].label
                  )}
                </th>
                <th className="w-24 px-3 py-4 text-sm font-medium text-muted-foreground">
                  {columns[1].sortable ? (
                    <Button
                      variant="ghost"
                      size="sm"
                      className="h-auto p-0 font-medium hover:bg-transparent"
                      onClick={() => handleSort(columns[1].key)}
                    >
                      {columns[1].label}
                      <ArrowUpDown className="ml-2 h-3 w-3" />
                    </Button>
                  ) : (
                    columns[1].label
                  )}
                </th>
                <th className="px-3 py-4 text-sm font-medium text-muted-foreground">
                  {columns[2].sortable ? (
                    <Button
                      variant="ghost"
                      size="sm"
                      className="h-auto p-0 font-medium hover:bg-transparent"
                      onClick={() => handleSort(columns[2].key)}
                    >
                      {columns[2].label}
                      <ArrowUpDown className="ml-2 h-3 w-3" />
                    </Button>
                  ) : (
                    columns[2].label
                  )}
                </th>
                <th className="w-32 px-3 py-4 text-sm font-medium text-muted-foreground hidden lg:table-cell">
                  {columns[3].sortable ? (
                    <Button
                      variant="ghost"
                      size="sm"
                      className="h-auto p-0 font-medium hover:bg-transparent"
                      onClick={() => handleSort(columns[3].key)}
                    >
                      {columns[3].label}
                      <ArrowUpDown className="ml-2 h-3 w-3" />
                    </Button>
                  ) : (
                    columns[3].label
                  )}
                </th>
                <th className="w-24 px-3 py-4 text-sm font-medium text-muted-foreground hidden xl:table-cell">
                  {columns[4].sortable ? (
                    <Button
                      variant="ghost"
                      size="sm"
                      className="h-auto p-0 font-medium hover:bg-transparent"
                      onClick={() => handleSort(columns[4].key)}
                    >
                      {columns[4].label}
                      <ArrowUpDown className="ml-2 h-3 w-3" />
                    </Button>
                  ) : (
                    columns[4].label
                  )}
                </th>
                <th className="w-28 px-3 py-4 text-sm font-medium text-muted-foreground">
                  {columns[5].sortable ? (
                    <Button
                      variant="ghost"
                      size="sm"
                      className="h-auto p-0 font-medium hover:bg-transparent"
                      onClick={() => handleSort(columns[5].key)}
                    >
                      {columns[5].label}
                      <ArrowUpDown className="ml-2 h-3 w-3" />
                    </Button>
                  ) : (
                    columns[5].label
                  )}
                </th>
                <th className="w-24 px-3 py-4 text-sm font-medium text-muted-foreground">
                  Actions
                </th>
              </tr>
            </thead>
            <tbody>
              {exploits.map((exploit) => (
                <tr
                  key={exploit.id}
                  className="border-b hover:bg-muted/30 transition-colors"
                  onMouseEnter={() => setHoveredRow(exploit.id)}
                  onMouseLeave={() => setHoveredRow(null)}
                >
                  <td className="px-3 py-4 text-sm font-mono text-muted-foreground">
                    {exploit.id}
                  </td>
                  <td className="px-3 py-4 text-sm text-muted-foreground">
                    {formatDate(exploit.date)}
                  </td>
                  <td className="px-3 py-4">
                    <div className="pr-2">
                      <div className="font-medium text-sm line-clamp-2 leading-relaxed">
                        {exploit.title}
                      </div>
                      <div className="text-xs text-muted-foreground mt-1 line-clamp-1">
                        {exploit.content_preview}
                      </div>
                    </div>
                  </td>
                  <td className="px-3 py-4 text-sm text-muted-foreground hidden lg:table-cell">
                    <div className="truncate" title={exploit.author}>
                      {exploit.author}
                    </div>
                  </td>
                  <td className="px-3 py-4 text-sm hidden xl:table-cell">
                    {getCveDisplay(exploit) ? (
                      <Badge variant="outline" className="text-xs">
                        {getCveDisplay(exploit)}
                      </Badge>
                    ) : (
                      <span className="text-muted-foreground">-</span>
                    )}
                  </td>
                  <td className="px-3 py-4">
                    <Badge variant="secondary" className="text-xs">
                      {exploit.category}
                    </Badge>
                  </td>
                  <td className="px-3 py-4">
                    <div className="flex items-center gap-1">
                      <Link href={`/exploit/${exploit.id}`}>
                        <Button variant="ghost" size="sm" className="h-8 w-8 p-0" title="View Details">
                          <ExternalLink className="h-4 w-4" />
                        </Button>
                      </Link>
                      <Button 
                        variant="ghost" 
                        size="sm" 
                        className="h-8 w-8 p-0" 
                        onClick={() => downloadExploit(exploit)}
                        title="Download Exploit"
                      >
                        <Download className="h-4 w-4" />
                      </Button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      </CardContent>
    </Card>
  );
}
