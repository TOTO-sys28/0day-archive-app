import { NextRequest, NextResponse } from 'next/server';
import { readFileSync } from 'fs';
import { join } from 'path';

// Cache for loaded data
let exploitsCache: any[] | null = null;

export async function GET(
  request: NextRequest,
  { params }: { params: { id: string } }
) {
  try {
    const exploitId = parseInt(params.id);

    if (isNaN(exploitId)) {
      return NextResponse.json(
        { error: 'Invalid exploit ID' },
        { status: 400 }
      );
    }

    // Load data only once and cache it
    if (!exploitsCache) {
      const dataPath = join(process.cwd(), 'public', 'data', 'exploits.json');
      exploitsCache = JSON.parse(readFileSync(dataPath, 'utf8'));
    }

    // Find the specific exploit
    const exploit = exploitsCache.find(e => e.id === exploitId);

    if (!exploit) {
      return NextResponse.json(
        { error: 'Exploit not found' },
        { status: 404 }
      );
    }

    return NextResponse.json({ data: exploit });

  } catch (error) {
    console.error('API Error:', error);
    return NextResponse.json(
      { error: 'Failed to load exploit' },
      { status: 500 }
    );
  }
}
