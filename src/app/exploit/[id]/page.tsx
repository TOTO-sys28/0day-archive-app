'use client';

import { useState } from 'react';
import { useParams } from 'next/navigation';
import Link from 'next/link';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { ParticleBackground } from '@/components/ParticleBackground';
import { useExploit } from '@/hooks/useExploit';
import { downloadExploit } from '@/lib/download';
import { ArrowLeft, Download, Copy, Check, ExternalLink } from 'lucide-react';

export default function ExploitDetailPage() {
  const params = useParams();
  const [copied, setCopied] = useState(false);
  
  const exploitId = parseInt(params.id as string);
  const { exploit, loading, error } = useExploit(exploitId);

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (error) {
      console.error('Failed to copy:', error);
    }
  };

  const formatDate = (date: string) => {
    if (!date || date === 'Unknown') return 'Unknown';
    try {
      const [month, day, year] = date.split('/');
      return `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`;
    } catch {
      return date;
    }
  };

  const getCveLinks = (exploit: Exploit) => {
    const cves = exploit.cves || [];
    if (exploit.cve_id) cves.unshift(exploit.cve_id);
    return cves.filter(Boolean);
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-background relative">
        <ParticleBackground />
        <div className="container mx-auto px-4 py-8 relative z-10">
          <div className="flex items-center justify-center h-64">
            <div className="text-center">
              <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4"></div>
              <p className="text-muted-foreground">Loading exploit...</p>
            </div>
          </div>
        </div>
      </div>
    );
  }

  if (error || !exploit) {
    return (
      <div className="min-h-screen bg-background relative">
        <ParticleBackground />
        <div className="container mx-auto px-4 py-8 relative z-10">
          <div className="text-center">
            <h1 className="text-2xl font-bold text-destructive mb-4">
              {error || 'Exploit Not Found'}
            </h1>
            <p className="text-muted-foreground mb-4">
              {error || 'The requested exploit could not be found.'}
            </p>
            <Link href="/">
              <Button>
                <ArrowLeft className="h-4 w-4 mr-2" />
                Back to Archive
              </Button>
            </Link>
          </div>
        </div>
      </div>
    );
  }

  const cveLinks = getCveLinks(exploit);

  return (
    <div className="min-h-screen bg-background relative">
      <ParticleBackground />
      {/* Header */}
      <header className="border-b bg-card">
        <div className="container mx-auto px-4 py-6">
          <div className="flex items-center justify-between">
            <div className="flex items-center space-x-4">
              <Link href="/">
                <Button variant="outline" size="sm">
                  <ArrowLeft className="h-4 w-4 mr-2" />
                  Back to Archive
                </Button>
              </Link>
              <div>
                <h1 className="text-2xl font-bold">Exploit #{exploit.id}</h1>
                <p className="text-muted-foreground">0day.sigma Archive</p>
              </div>
            </div>
            <div className="flex items-center space-x-2">
              <Button
                variant="outline"
                size="sm"
                onClick={() => copyToClipboard(exploit.content)}
              >
                {copied ? <Check className="h-4 w-4 mr-2" /> : <Copy className="h-4 w-4 mr-2" />}
                {copied ? 'Copied!' : 'Copy Code'}
              </Button>
              <Button 
                variant="outline" 
                size="sm"
                onClick={() => exploit && downloadExploit(exploit)}
              >
                <Download className="h-4 w-4 mr-2" />
                Download
              </Button>
            </div>
          </div>
        </div>
      </header>

      <div className="container mx-auto px-4 py-8 relative z-10">
        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Sidebar */}
          <div className="lg:col-span-1 space-y-6">
            <Card>
              <CardHeader>
                <CardTitle>Exploit Details</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <label className="text-sm font-medium text-muted-foreground">Title</label>
                  <p className="text-sm mt-1">{exploit.title}</p>
                </div>
                
                <div>
                  <label className="text-sm font-medium text-muted-foreground">Author</label>
                  <p className="text-sm mt-1">{exploit.author}</p>
                </div>
                
                <div>
                  <label className="text-sm font-medium text-muted-foreground">Date</label>
                  <p className="text-sm mt-1">{formatDate(exploit.date)}</p>
                </div>
                
                <div>
                  <label className="text-sm font-medium text-muted-foreground">Category</label>
                  <div className="mt-1">
                    <Badge variant="secondary">{exploit.category}</Badge>
                  </div>
                </div>
                
                {exploit.platform && (
                  <div>
                    <label className="text-sm font-medium text-muted-foreground">Platform</label>
                    <p className="text-sm mt-1">{exploit.platform}</p>
                  </div>
                )}
                
                {cveLinks.length > 0 && (
                  <div>
                    <label className="text-sm font-medium text-muted-foreground">CVE References</label>
                    <div className="mt-1 space-y-1">
                      {cveLinks.map((cve, index) => (
                        <div key={index} className="flex items-center space-x-2">
                          <Badge variant="outline">{cve}</Badge>
                          <Button
                            variant="ghost"
                            size="sm"
                            onClick={() => window.open(`https://cve.mitre.org/cgi-bin/cvename.cgi?name=${cve}`, '_blank')}
                          >
                            <ExternalLink className="h-3 w-3" />
                          </Button>
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>

          {/* Main Content */}
          <div className="lg:col-span-2">
            <Card>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <CardTitle>Exploit Code</CardTitle>
                  <div className="flex items-center gap-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => copyToClipboard(exploit.content)}
                    >
                      {copied ? <Check className="h-4 w-4 mr-2" /> : <Copy className="h-4 w-4 mr-2" />}
                      {copied ? 'Copied!' : 'Copy'}
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => downloadExploit(exploit)}
                    >
                      <Download className="h-4 w-4 mr-2" />
                      Download
                    </Button>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <div className="relative">
                  <pre className="bg-muted p-4 rounded-lg overflow-x-auto text-sm font-mono whitespace-pre-wrap">
                    {exploit.content}
                  </pre>
                </div>
              </CardContent>
            </Card>
          </div>
        </div>
      </div>
    </div>
  );
}
